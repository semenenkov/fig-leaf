<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Common_Culture" xml:space="preserve">
    <value>en-US</value>
  </data>
  <data name="Common_Language" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="Core_FileProcessor_CreateDirFormat" xml:space="preserve">
    <value>Create folder {0}</value>
  </data>
  <data name="Common_ErrorFormat" xml:space="preserve">
    <value>Error: {0}</value>
  </data>
  <data name="Core_FileProcessor_LogSum_CreatedTargetDirsFormat" xml:space="preserve">
    <value>Created target folders: {0}</value>
  </data>
  <data name="Core_FileProcessor_LogSum_CreatedTargetFilesFormat" xml:space="preserve">
    <value>Created target files: {0}</value>
  </data>
  <data name="Core_FileProcessor_LogSum_CreatedTargetThumbsFormat" xml:space="preserve">
    <value>Created target thumbnails: {0}</value>
  </data>
  <data name="Core_FileProcessor_LogSum_ProcessedSourceDirsFormat" xml:space="preserve">
    <value>Processed source folders: {0}</value>
  </data>
  <data name="Core_FileProcessor_LogSum_ProcessedSourceFilesFormat" xml:space="preserve">
    <value>Processed source files: {0}</value>
  </data>
  <data name="Core_FileProcessor_LogSum_RemovedObsoleteTargetFilesFormat" xml:space="preserve">
    <value>Removed obsolete target files: {0}</value>
  </data>
  <data name="Core_FileProcessor_LogSum_RemovedObsoleteTargetThumbsFormat" xml:space="preserve">
    <value>Removed obsolete target thumbnails: {0}</value>
  </data>
  <data name="Core_FileProcessor_LogSum_RemovedTargetDirsWoSourceFormat" xml:space="preserve">
    <value>Removed target folders without source: {0}</value>
  </data>
  <data name="Core_FileProcessor_LogSum_RemovedTargetFilesWoSourceFormat" xml:space="preserve">
    <value>Removed target files without source: {0}</value>
  </data>
  <data name="Core_FileProcessor_SkipFigLeafDirFormat" xml:space="preserve">
    <value>Skip FigLeaf folder {0}</value>
  </data>
  <data name="Core_FileProcessor_NonEmptyTargetDirError" xml:space="preserve">
    <value>Target dir must be empty</value>
  </data>
  <data name="Core_FileProcessor_NoSourceDirError" xml:space="preserve">
    <value>Source folder does not exist</value>
  </data>
  <data name="Core_FileProcessor_StartPackFormat" xml:space="preserve">
    <value>Pack from {0} to {1}</value>
  </data>
  <data name="Core_PasswordRule_FileNameNumbersPlusPassword" xml:space="preserve">
    <value>File name numbers followed by master password</value>
  </data>
  <data name="Core_PasswordRule_Password" xml:space="preserve">
    <value>Master password only</value>
  </data>
  <data name="Core_PasswordRule_PasswordPlusFileNameNumbers" xml:space="preserve">
    <value>Master password followed by file name numbers</value>
  </data>
  <data name="Ui_Actions_Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Ui_Actions_DetailedLogging" xml:space="preserve">
    <value>(detailed logging)</value>
  </data>
  <data name="Ui_Actions_Header" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="Ui_Actions_Log" xml:space="preserve">
    <value>Log</value>
  </data>
  <data name="Ui_Actions_RestoreTargetTo" xml:space="preserve">
    <value>Unpack to ..</value>
  </data>
  <data name="Ui_Actions_UpdateTarget" xml:space="preserve">
    <value>Pack</value>
  </data>
  <data name="Ui_Dialogs_RestoreTarget" xml:space="preserve">
    <value>Specify empty folder to unpack files</value>
  </data>
  <data name="Ui_Dialogs_SwitchLanguageFormat" xml:space="preserve">
    <value>Change language to {0} and restart application?</value>
  </data>
  <data name="Ui_Folders_ExcludeFigLeafDir" xml:space="preserve">
    <value>Exclude FigLeaf folder</value>
  </data>
  <data name="Ui_Folders_Header" xml:space="preserve">
    <value>Folders</value>
  </data>
  <data name="Ui_Folders_Source" xml:space="preserve">
    <value>Source</value>
  </data>
  <data name="Ui_Folders_Target" xml:space="preserve">
    <value>Target</value>
  </data>
  <data name="Ui_Security_Header" xml:space="preserve">
    <value>Archive</value>
  </data>
  <data name="Ui_Security_MasterPassword" xml:space="preserve">
    <value>Master password</value>
  </data>
  <data name="Ui_Security_PasswordRule" xml:space="preserve">
    <value>Password rule</value>
  </data>
  <data name="Ui_Security_ShowPassword" xml:space="preserve">
    <value>Show password</value>
  </data>
  <data name="Ui_Thumbnails_Header" xml:space="preserve">
    <value>Thumbnails</value>
  </data>
  <data name="Ui_Thumbnails_Size" xml:space="preserve">
    <value>Size in pixels</value>
  </data>
  <data name="Core_FileProcessor_CreatingThumbFormat" xml:space="preserve">
    <value>Create thumbnail file {0}</value>
  </data>
  <data name="Core_FileProcessor_DeletingObsoleteTargetFileFormat" xml:space="preserve">
    <value>Delete obsolete target file {0}</value>
  </data>
  <data name="Core_FileProcessor_DeletingObsoleteThumbFormat" xml:space="preserve">
    <value>Delete obsolete thumbnail file {0}</value>
  </data>
  <data name="Core_FileProcessor_DeletingTargetDirWoSourceFormat" xml:space="preserve">
    <value>Delete target folder without source {0} (with {1} sub-folders and {2} files)</value>
  </data>
  <data name="Core_FileProcessor_DeletingTargetFileWoSourceFormat" xml:space="preserve">
    <value>Delete target file without source {0}</value>
  </data>
  <data name="Core_FileProcessor_PackingFileFormat" xml:space="preserve">
    <value>Pack file {0} to {1}</value>
  </data>
  <data name="Core_FileProcessor_UnpackingFileFormat" xml:space="preserve">
    <value>Unpack file {0} to {1}</value>
  </data>
  <data name="Core_ThumbErrorFormat" xml:space="preserve">
    <value>Failed to make thumbnail for the file {0}: {1}</value>
  </data>
  <data name="Console_NoSettings" xml:space="preserve">
    <value>Settings file not found</value>
  </data>
  <data name="Ui_Folders_HasMultiple" xml:space="preserve">
    <value>Setup multiple folders</value>
  </data>
  <data name="Ui_Folders_Add" xml:space="preserve">
    <value>Add folder</value>
  </data>
  <data name="Ui_Folders_RestoreHeader" xml:space="preserve">
    <value>Unpack</value>
  </data>
  <data name="Common_AppTitle" xml:space="preserve">
    <value>Fig Leaf</value>
  </data>
  <data name="Console_RestoreSourceNotDefined" xml:space="preserve">
    <value>Failed to define restore source</value>
  </data>
  <data name="Core_ArchiveNameRule_AddZipExtension" xml:space="preserve">
    <value>Add '.zip' extension to file name</value>
  </data>
  <data name="Core_ArchiveNameRule_KeepOriginal" xml:space="preserve">
    <value>Keep original file name</value>
  </data>
  <data name="Ui_Folders_Delete" xml:space="preserve">
    <value>Delete folder</value>
  </data>
  <data name="Ui_Folders_ExcludeFigLeafDir_Tip" xml:space="preserve">
    <value>You can store this program in some subfolder of your source folder.
With this option enabled, this subfolder will not be packed to the target.</value>
  </data>
  <data name="Ui_Security_ArchiveNameRule" xml:space="preserve">
    <value>File name</value>
  </data>
  <data name="Ui_Thumbnails_Enable" xml:space="preserve">
    <value>Generate thumbnails</value>
  </data>
  <data name="Core_FileProcessor_StartUnpackFormat" xml:space="preserve">
    <value>Unpack from {0} to {1}</value>
  </data>
  <data name="Console_ConfirmDeleteFormat" xml:space="preserve">
    <value>There is a target file/folder that does not exist in source:
{0}
Delete it and all such files and folders (type 'Y') or cancel Pack operation (type 'N')?</value>
  </data>
  <data name="Core_FileProcessor_Cancel" xml:space="preserve">
    <value>Operation cancelled</value>
  </data>
  <data name="Ui_ConfirmDeleteFormat" xml:space="preserve">
    <value>There is a target file/folder that does not exist in source:
{0}
Delete it and all such files and folders (Yes) or cancel Pack operation (No)?</value>
  </data>
  <data name="Ui_Folders_ConfirmDelete" xml:space="preserve">
    <value>Confirm target files &amp; folders deletion</value>
  </data>
  <data name="Ui_Folders_ConfirmDelete_Tip" xml:space="preserve">
    <value>During the Pack target folder(s) structure will be synced with the source.
If some files/folders does not exist in the source - they needs to be deleted.
Enable this option to prevent unintended deletion that can be made by mistake.
</value>
  </data>
</root>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5 D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g 2014-09-01 18:43:25

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace  FigLeaf.Core.PasswordRules 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5")]
[System.CLSCompliant(false)]
public partial class FigLeafPasswordRuleLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__9=9;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int CLOSEBRACKET=4;
	public const int COMMA=5;
	public const int DIGIT=6;
	public const int OPENBRACKET=7;
	public const int SPACE=8;

    // delegates
    // delegators

	public FigLeafPasswordRuleLexer()
	{
		OnCreated();
	}

	public FigLeafPasswordRuleLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public FigLeafPasswordRuleLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__9() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__9() {}

    // $ANTLR start "T__9"
    [GrammarRule("T__9")]
    private void mT__9()
    {
    	EnterRule_T__9();
    	EnterRule("T__9", 1);
    	TraceIn("T__9", 1);
    		try
    		{
    		int _type = T__9;
    		int _channel = DefaultTokenChannel;
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:9:6: ( 'Add' )
    		DebugEnterAlt(1);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:9:8: 'Add'
    		{
    		DebugLocation(9, 8);
    		Match("Add"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__9", 1);
    		LeaveRule("T__9", 1);
    		LeaveRule_T__9();
        }
    }
    // $ANTLR end "T__9"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__10() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__10() {}

    // $ANTLR start "T__10"
    [GrammarRule("T__10")]
    private void mT__10()
    {
    	EnterRule_T__10();
    	EnterRule("T__10", 2);
    	TraceIn("T__10", 2);
    		try
    		{
    		int _type = T__10;
    		int _channel = DefaultTokenChannel;
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:10:7: ( 'Digits' )
    		DebugEnterAlt(1);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:10:9: 'Digits'
    		{
    		DebugLocation(10, 9);
    		Match("Digits"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__10", 2);
    		LeaveRule("T__10", 2);
    		LeaveRule_T__10();
        }
    }
    // $ANTLR end "T__10"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__11() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__11() {}

    // $ANTLR start "T__11"
    [GrammarRule("T__11")]
    private void mT__11()
    {
    	EnterRule_T__11();
    	EnterRule("T__11", 3);
    	TraceIn("T__11", 3);
    		try
    		{
    		int _type = T__11;
    		int _channel = DefaultTokenChannel;
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:11:7: ( 'FileExtension' )
    		DebugEnterAlt(1);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:11:9: 'FileExtension'
    		{
    		DebugLocation(11, 9);
    		Match("FileExtension"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__11", 3);
    		LeaveRule("T__11", 3);
    		LeaveRule_T__11();
        }
    }
    // $ANTLR end "T__11"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__12() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__12() {}

    // $ANTLR start "T__12"
    [GrammarRule("T__12")]
    private void mT__12()
    {
    	EnterRule_T__12();
    	EnterRule("T__12", 4);
    	TraceIn("T__12", 4);
    		try
    		{
    		int _type = T__12;
    		int _channel = DefaultTokenChannel;
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:12:7: ( 'FileName' )
    		DebugEnterAlt(1);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:12:9: 'FileName'
    		{
    		DebugLocation(12, 9);
    		Match("FileName"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__12", 4);
    		LeaveRule("T__12", 4);
    		LeaveRule_T__12();
        }
    }
    // $ANTLR end "T__12"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__13() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__13() {}

    // $ANTLR start "T__13"
    [GrammarRule("T__13")]
    private void mT__13()
    {
    	EnterRule_T__13();
    	EnterRule("T__13", 5);
    	TraceIn("T__13", 5);
    		try
    		{
    		int _type = T__13;
    		int _channel = DefaultTokenChannel;
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:13:7: ( 'Left' )
    		DebugEnterAlt(1);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:13:9: 'Left'
    		{
    		DebugLocation(13, 9);
    		Match("Left"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__13", 5);
    		LeaveRule("T__13", 5);
    		LeaveRule_T__13();
        }
    }
    // $ANTLR end "T__13"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__14() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__14() {}

    // $ANTLR start "T__14"
    [GrammarRule("T__14")]
    private void mT__14()
    {
    	EnterRule_T__14();
    	EnterRule("T__14", 6);
    	TraceIn("T__14", 6);
    		try
    		{
    		int _type = T__14;
    		int _channel = DefaultTokenChannel;
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:14:7: ( 'Len' )
    		DebugEnterAlt(1);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:14:9: 'Len'
    		{
    		DebugLocation(14, 9);
    		Match("Len"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__14", 6);
    		LeaveRule("T__14", 6);
    		LeaveRule_T__14();
        }
    }
    // $ANTLR end "T__14"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__15() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__15() {}

    // $ANTLR start "T__15"
    [GrammarRule("T__15")]
    private void mT__15()
    {
    	EnterRule_T__15();
    	EnterRule("T__15", 7);
    	TraceIn("T__15", 7);
    		try
    		{
    		int _type = T__15;
    		int _channel = DefaultTokenChannel;
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:15:7: ( 'Lower' )
    		DebugEnterAlt(1);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:15:9: 'Lower'
    		{
    		DebugLocation(15, 9);
    		Match("Lower"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__15", 7);
    		LeaveRule("T__15", 7);
    		LeaveRule_T__15();
        }
    }
    // $ANTLR end "T__15"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__16() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__16() {}

    // $ANTLR start "T__16"
    [GrammarRule("T__16")]
    private void mT__16()
    {
    	EnterRule_T__16();
    	EnterRule("T__16", 8);
    	TraceIn("T__16", 8);
    		try
    		{
    		int _type = T__16;
    		int _channel = DefaultTokenChannel;
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:16:7: ( 'Password' )
    		DebugEnterAlt(1);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:16:9: 'Password'
    		{
    		DebugLocation(16, 9);
    		Match("Password"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__16", 8);
    		LeaveRule("T__16", 8);
    		LeaveRule_T__16();
        }
    }
    // $ANTLR end "T__16"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__17() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__17() {}

    // $ANTLR start "T__17"
    [GrammarRule("T__17")]
    private void mT__17()
    {
    	EnterRule_T__17();
    	EnterRule("T__17", 9);
    	TraceIn("T__17", 9);
    		try
    		{
    		int _type = T__17;
    		int _channel = DefaultTokenChannel;
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:17:7: ( 'RemoveFileExtension' )
    		DebugEnterAlt(1);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:17:9: 'RemoveFileExtension'
    		{
    		DebugLocation(17, 9);
    		Match("RemoveFileExtension"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__17", 9);
    		LeaveRule("T__17", 9);
    		LeaveRule_T__17();
        }
    }
    // $ANTLR end "T__17"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__18() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__18() {}

    // $ANTLR start "T__18"
    [GrammarRule("T__18")]
    private void mT__18()
    {
    	EnterRule_T__18();
    	EnterRule("T__18", 10);
    	TraceIn("T__18", 10);
    		try
    		{
    		int _type = T__18;
    		int _channel = DefaultTokenChannel;
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:18:7: ( 'Reverse' )
    		DebugEnterAlt(1);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:18:9: 'Reverse'
    		{
    		DebugLocation(18, 9);
    		Match("Reverse"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__18", 10);
    		LeaveRule("T__18", 10);
    		LeaveRule_T__18();
        }
    }
    // $ANTLR end "T__18"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__19() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__19() {}

    // $ANTLR start "T__19"
    [GrammarRule("T__19")]
    private void mT__19()
    {
    	EnterRule_T__19();
    	EnterRule("T__19", 11);
    	TraceIn("T__19", 11);
    		try
    		{
    		int _type = T__19;
    		int _channel = DefaultTokenChannel;
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:19:7: ( 'Right' )
    		DebugEnterAlt(1);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:19:9: 'Right'
    		{
    		DebugLocation(19, 9);
    		Match("Right"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__19", 11);
    		LeaveRule("T__19", 11);
    		LeaveRule_T__19();
        }
    }
    // $ANTLR end "T__19"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__20() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__20() {}

    // $ANTLR start "T__20"
    [GrammarRule("T__20")]
    private void mT__20()
    {
    	EnterRule_T__20();
    	EnterRule("T__20", 12);
    	TraceIn("T__20", 12);
    		try
    		{
    		int _type = T__20;
    		int _channel = DefaultTokenChannel;
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:20:7: ( 'Upper' )
    		DebugEnterAlt(1);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:20:9: 'Upper'
    		{
    		DebugLocation(20, 9);
    		Match("Upper"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__20", 12);
    		LeaveRule("T__20", 12);
    		LeaveRule_T__20();
        }
    }
    // $ANTLR end "T__20"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DIGIT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DIGIT() {}

    // $ANTLR start "DIGIT"
    [GrammarRule("DIGIT")]
    private void mDIGIT()
    {
    	EnterRule_DIGIT();
    	EnterRule("DIGIT", 13);
    	TraceIn("DIGIT", 13);
    		try
    		{
    		int _type = DIGIT;
    		int _channel = DefaultTokenChannel;
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:95:2: ( '0' .. '9' )
    		DebugEnterAlt(1);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:
    		{
    		DebugLocation(95, 2);
    		if ((input.LA(1)>='0' && input.LA(1)<='9'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DIGIT", 13);
    		LeaveRule("DIGIT", 13);
    		LeaveRule_DIGIT();
        }
    }
    // $ANTLR end "DIGIT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SPACE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SPACE() {}

    // $ANTLR start "SPACE"
    [GrammarRule("SPACE")]
    private void mSPACE()
    {
    	EnterRule_SPACE();
    	EnterRule("SPACE", 14);
    	TraceIn("SPACE", 14);
    		try
    		{
    		int _type = SPACE;
    		int _channel = DefaultTokenChannel;
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:98:2: ( ' ' )
    		DebugEnterAlt(1);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:98:4: ' '
    		{
    		DebugLocation(98, 4);
    		Match(' '); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("SPACE", 14);
    		LeaveRule("SPACE", 14);
    		LeaveRule_SPACE();
        }
    }
    // $ANTLR end "SPACE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_COMMA() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_COMMA() {}

    // $ANTLR start "COMMA"
    [GrammarRule("COMMA")]
    private void mCOMMA()
    {
    	EnterRule_COMMA();
    	EnterRule("COMMA", 15);
    	TraceIn("COMMA", 15);
    		try
    		{
    		int _type = COMMA;
    		int _channel = DefaultTokenChannel;
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:101:2: ( ',' )
    		DebugEnterAlt(1);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:101:4: ','
    		{
    		DebugLocation(101, 4);
    		Match(','); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("COMMA", 15);
    		LeaveRule("COMMA", 15);
    		LeaveRule_COMMA();
        }
    }
    // $ANTLR end "COMMA"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_OPENBRACKET() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_OPENBRACKET() {}

    // $ANTLR start "OPENBRACKET"
    [GrammarRule("OPENBRACKET")]
    private void mOPENBRACKET()
    {
    	EnterRule_OPENBRACKET();
    	EnterRule("OPENBRACKET", 16);
    	TraceIn("OPENBRACKET", 16);
    		try
    		{
    		int _type = OPENBRACKET;
    		int _channel = DefaultTokenChannel;
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:104:2: ( '(' )
    		DebugEnterAlt(1);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:104:4: '('
    		{
    		DebugLocation(104, 4);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("OPENBRACKET", 16);
    		LeaveRule("OPENBRACKET", 16);
    		LeaveRule_OPENBRACKET();
        }
    }
    // $ANTLR end "OPENBRACKET"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_CLOSEBRACKET() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_CLOSEBRACKET() {}

    // $ANTLR start "CLOSEBRACKET"
    [GrammarRule("CLOSEBRACKET")]
    private void mCLOSEBRACKET()
    {
    	EnterRule_CLOSEBRACKET();
    	EnterRule("CLOSEBRACKET", 17);
    	TraceIn("CLOSEBRACKET", 17);
    		try
    		{
    		int _type = CLOSEBRACKET;
    		int _channel = DefaultTokenChannel;
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:107:2: ( ')' )
    		DebugEnterAlt(1);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:107:4: ')'
    		{
    		DebugLocation(107, 4);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("CLOSEBRACKET", 17);
    		LeaveRule("CLOSEBRACKET", 17);
    		LeaveRule_CLOSEBRACKET();
        }
    }
    // $ANTLR end "CLOSEBRACKET"

    public override void mTokens()
    {
    	// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:1:8: ( T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | DIGIT | SPACE | COMMA | OPENBRACKET | CLOSEBRACKET )
    	int alt1=17;
    	try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    	switch (input.LA(1))
    	{
    	case 'A':
    		{
    		alt1 = 1;
    		}
    		break;
    	case 'D':
    		{
    		alt1 = 2;
    		}
    		break;
    	case 'F':
    		{
    		int LA1_2 = input.LA(2);

    		if ((LA1_2=='i'))
    		{
    			int LA1_3 = input.LA(3);

    			if ((LA1_3=='l'))
    			{
    				int LA1_4 = input.LA(4);

    				if ((LA1_4=='e'))
    				{
    					int LA1_5 = input.LA(5);

    					if ((LA1_5=='E'))
    					{
    						alt1 = 3;
    					}
    					else if ((LA1_5=='N'))
    					{
    						alt1 = 4;
    					}
    					else
    					{
    						NoViableAltException nvae = new NoViableAltException("", 1, 23, input, 5);
    						DebugRecognitionException(nvae);
    						throw nvae;
    					}
    				}
    				else
    				{
    					NoViableAltException nvae = new NoViableAltException("", 1, 18, input, 4);
    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 1, 13, input, 3);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 1, 3, input, 2);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		}
    		break;
    	case 'L':
    		{
    		int LA1_2 = input.LA(2);

    		if ((LA1_2=='e'))
    		{
    			int LA1_3 = input.LA(3);

    			if ((LA1_3=='f'))
    			{
    				alt1 = 5;
    			}
    			else if ((LA1_3=='n'))
    			{
    				alt1 = 6;
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 1, 14, input, 3);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else if ((LA1_2=='o'))
    		{
    			alt1 = 7;
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 1, 4, input, 2);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		}
    		break;
    	case 'P':
    		{
    		alt1 = 8;
    		}
    		break;
    	case 'R':
    		{
    		int LA1_2 = input.LA(2);

    		if ((LA1_2=='e'))
    		{
    			int LA1_3 = input.LA(3);

    			if ((LA1_3=='m'))
    			{
    				alt1 = 9;
    			}
    			else if ((LA1_3=='v'))
    			{
    				alt1 = 10;
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 1, 16, input, 3);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else if ((LA1_2=='i'))
    		{
    			alt1 = 11;
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 1, 6, input, 2);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		}
    		break;
    	case 'U':
    		{
    		alt1 = 12;
    		}
    		break;
    	case '0':
    	case '1':
    	case '2':
    	case '3':
    	case '4':
    	case '5':
    	case '6':
    	case '7':
    	case '8':
    	case '9':
    		{
    		alt1 = 13;
    		}
    		break;
    	case ' ':
    		{
    		alt1 = 14;
    		}
    		break;
    	case ',':
    		{
    		alt1 = 15;
    		}
    		break;
    	case '(':
    		{
    		alt1 = 16;
    		}
    		break;
    	case ')':
    		{
    		alt1 = 17;
    		}
    		break;
    	default:
    		{
    			NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    	}

    	} finally { DebugExitDecision(1); }
    	switch (alt1)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:1:10: T__9
    		{
    		DebugLocation(1, 10);
    		mT__9(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:1:15: T__10
    		{
    		DebugLocation(1, 15);
    		mT__10(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:1:21: T__11
    		{
    		DebugLocation(1, 21);
    		mT__11(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:1:27: T__12
    		{
    		DebugLocation(1, 27);
    		mT__12(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:1:33: T__13
    		{
    		DebugLocation(1, 33);
    		mT__13(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:1:39: T__14
    		{
    		DebugLocation(1, 39);
    		mT__14(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:1:45: T__15
    		{
    		DebugLocation(1, 45);
    		mT__15(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:1:51: T__16
    		{
    		DebugLocation(1, 51);
    		mT__16(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:1:57: T__17
    		{
    		DebugLocation(1, 57);
    		mT__17(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:1:63: T__18
    		{
    		DebugLocation(1, 63);
    		mT__18(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:1:69: T__19
    		{
    		DebugLocation(1, 69);
    		mT__19(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:1:75: T__20
    		{
    		DebugLocation(1, 75);
    		mT__20(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:1:81: DIGIT
    		{
    		DebugLocation(1, 81);
    		mDIGIT(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:1:87: SPACE
    		{
    		DebugLocation(1, 87);
    		mSPACE(); 

    		}
    		break;
    	case 15:
    		DebugEnterAlt(15);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:1:93: COMMA
    		{
    		DebugLocation(1, 93);
    		mCOMMA(); 

    		}
    		break;
    	case 16:
    		DebugEnterAlt(16);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:1:99: OPENBRACKET
    		{
    		DebugLocation(1, 99);
    		mOPENBRACKET(); 

    		}
    		break;
    	case 17:
    		DebugEnterAlt(17);
    		// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:1:111: CLOSEBRACKET
    		{
    		DebugLocation(1, 111);
    		mCLOSEBRACKET(); 

    		}
    		break;

    	}

    }


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

 
	#endregion

}

} // namespace  FigLeaf.Core.PasswordRules 

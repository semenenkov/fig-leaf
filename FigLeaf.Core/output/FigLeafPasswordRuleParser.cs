//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5 D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g 2014-09-01 18:43:25

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


	using FigLeaf.Core;
	using FigLeaf.Core.PasswordRules;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace  FigLeaf.Core.PasswordRules 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5")]
[System.CLSCompliant(false)]
public partial class FigLeafPasswordRuleParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CLOSEBRACKET", "COMMA", "DIGIT", "OPENBRACKET", "SPACE", "'Add'", "'Digits'", "'FileExtension'", "'FileName'", "'Left'", "'Len'", "'Lower'", "'Password'", "'RemoveFileExtension'", "'Reverse'", "'Right'", "'Upper'"
	};
	public const int EOF=-1;
	public const int T__9=9;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int CLOSEBRACKET=4;
	public const int COMMA=5;
	public const int DIGIT=6;
	public const int OPENBRACKET=7;
	public const int SPACE=8;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public FigLeafPasswordRuleParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public FigLeafPasswordRuleParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return FigLeafPasswordRuleParser.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_baseArgument() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_baseArgument() {}
	// $ANTLR start "baseArgument"
	// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:18:1: baseArgument[string parseFileName, string parsePassword] returns [string value] : ( password | fileName );
	[GrammarRule("baseArgument")]
	private string baseArgument(string parseFileName, string parsePassword)
	{
		EnterRule_baseArgument();
		EnterRule("baseArgument", 1);
		TraceIn("baseArgument", 1);
	    string value = default(string);


		try { DebugEnterRule(GrammarFileName, "baseArgument");
		DebugLocation(18, 1);
		try
		{
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:19:2: ( password | fileName )
			int alt1=2;
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_1 = input.LA(1);

			if ((LA1_1==16))
			{
				alt1 = 1;
			}
			else if ((LA1_1==12))
			{
				alt1 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:19:4: password
				{
				DebugLocation(19, 4);
				PushFollow(Follow._password_in_baseArgument51);
				password();
				PopFollow();

				DebugLocation(20, 2);

						value = parsePassword;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:23:4: fileName
				{
				DebugLocation(23, 4);
				PushFollow(Follow._fileName_in_baseArgument59);
				fileName();
				PopFollow();

				DebugLocation(24, 2);

						value = parseFileName;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("baseArgument", 1);
			LeaveRule("baseArgument", 1);
			LeaveRule_baseArgument();
	    }
	 	DebugLocation(27, 1);
		} finally { DebugExitRule(GrammarFileName, "baseArgument"); }
		return value;

	}
	// $ANTLR end "baseArgument"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functionArgument() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functionArgument() {}
	// $ANTLR start "functionArgument"
	// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:29:8: public functionArgument[string parseFileName, string parsePassword] returns [string value] : (ba= baseArgument[parseFileName, parsePassword] |n= number |f= function[parseFileName, parsePassword] );
	[GrammarRule("functionArgument")]
	public string functionArgument(string parseFileName, string parsePassword)
	{
		EnterRule_functionArgument();
		EnterRule("functionArgument", 2);
		TraceIn("functionArgument", 2);
	    string value = default(string);


	    string ba = default(string);
	    ParserRuleReturnScope<IToken> n = default(ParserRuleReturnScope<IToken>);
	    string f = default(string);

		try { DebugEnterRule(GrammarFileName, "functionArgument");
		DebugLocation(29, 1);
		try
		{
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:30:2: (ba= baseArgument[parseFileName, parsePassword] |n= number |f= function[parseFileName, parsePassword] )
			int alt2=3;
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			switch (input.LA(1))
			{
			case 12:
			case 16:
				{
				alt2 = 1;
				}
				break;
			case DIGIT:
				{
				alt2 = 2;
				}
				break;
			case 9:
			case 10:
			case 11:
			case 13:
			case 14:
			case 15:
			case 17:
			case 18:
			case 19:
			case 20:
				{
				alt2 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:30:4: ba= baseArgument[parseFileName, parsePassword]
				{
				DebugLocation(30, 7);
				PushFollow(Follow._baseArgument_in_functionArgument83);
				ba=baseArgument(parseFileName, parsePassword);
				PopFollow();

				DebugLocation(31, 2);

						value = ba;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:34:4: n= number
				{
				DebugLocation(34, 6);
				PushFollow(Follow._number_in_functionArgument96);
				n=number();
				PopFollow();

				DebugLocation(35, 2);

						value = (n!=null?input.ToString(n.Start,n.Stop):default(string));
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:38:4: f= function[parseFileName, parsePassword]
				{
				DebugLocation(38, 6);
				PushFollow(Follow._function_in_functionArgument108);
				f=function(parseFileName, parsePassword);
				PopFollow();

				DebugLocation(39, 2);

						value = f;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionArgument", 2);
			LeaveRule("functionArgument", 2);
			LeaveRule_functionArgument();
	    }
	 	DebugLocation(42, 1);
		} finally { DebugExitRule(GrammarFileName, "functionArgument"); }
		return value;

	}
	// $ANTLR end "functionArgument"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_function() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_function() {}
	// $ANTLR start "function"
	// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:44:1: function[string parseFileName, string parsePassword] returns [string value] : (uf= unaryFunction[parseFileName, parsePassword] |bf= binaryFunction[parseFileName, parsePassword] );
	[GrammarRule("function")]
	private string function(string parseFileName, string parsePassword)
	{
		EnterRule_function();
		EnterRule("function", 3);
		TraceIn("function", 3);
	    string value = default(string);


	    string uf = default(string);
	    string bf = default(string);

		try { DebugEnterRule(GrammarFileName, "function");
		DebugLocation(44, 1);
		try
		{
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:45:2: (uf= unaryFunction[parseFileName, parsePassword] |bf= binaryFunction[parseFileName, parsePassword] )
			int alt3=2;
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_1 = input.LA(1);

			if (((LA3_1>=10 && LA3_1<=11)||(LA3_1>=14 && LA3_1<=15)||(LA3_1>=17 && LA3_1<=18)||LA3_1==20))
			{
				alt3 = 1;
			}
			else if ((LA3_1==9||LA3_1==13||LA3_1==19))
			{
				alt3 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:45:4: uf= unaryFunction[parseFileName, parsePassword]
				{
				DebugLocation(45, 7);
				PushFollow(Follow._unaryFunction_in_function131);
				uf=unaryFunction(parseFileName, parsePassword);
				PopFollow();

				DebugLocation(46, 2);

						value = uf;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:49:4: bf= binaryFunction[parseFileName, parsePassword]
				{
				DebugLocation(49, 7);
				PushFollow(Follow._binaryFunction_in_function144);
				bf=binaryFunction(parseFileName, parsePassword);
				PopFollow();

				DebugLocation(50, 2);

						value = bf;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function", 3);
			LeaveRule("function", 3);
			LeaveRule_function();
	    }
	 	DebugLocation(53, 1);
		} finally { DebugExitRule(GrammarFileName, "function"); }
		return value;

	}
	// $ANTLR end "function"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_binaryFunction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_binaryFunction() {}
	// $ANTLR start "binaryFunction"
	// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:55:1: binaryFunction[string parseFileName, string parsePassword] returns [string value] : func= binaryFunctionName OPENBRACKET arg1= functionArgument[parseFileName, parsePassword] COMMA ( SPACE )* arg2= functionArgument[parseFileName, parsePassword] CLOSEBRACKET ;
	[GrammarRule("binaryFunction")]
	private string binaryFunction(string parseFileName, string parsePassword)
	{
		EnterRule_binaryFunction();
		EnterRule("binaryFunction", 4);
		TraceIn("binaryFunction", 4);
	    string value = default(string);


	    ParserRuleReturnScope<IToken> func = default(ParserRuleReturnScope<IToken>);
	    string arg1 = default(string);
	    string arg2 = default(string);

		try { DebugEnterRule(GrammarFileName, "binaryFunction");
		DebugLocation(55, 1);
		try
		{
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:56:2: (func= binaryFunctionName OPENBRACKET arg1= functionArgument[parseFileName, parsePassword] COMMA ( SPACE )* arg2= functionArgument[parseFileName, parsePassword] CLOSEBRACKET )
			DebugEnterAlt(1);
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:56:4: func= binaryFunctionName OPENBRACKET arg1= functionArgument[parseFileName, parsePassword] COMMA ( SPACE )* arg2= functionArgument[parseFileName, parsePassword] CLOSEBRACKET
			{
			DebugLocation(56, 9);
			PushFollow(Follow._binaryFunctionName_in_binaryFunction167);
			func=binaryFunctionName();
			PopFollow();

			DebugLocation(56, 30);
			Match(input,OPENBRACKET,Follow._OPENBRACKET_in_binaryFunction169); 
			DebugLocation(56, 47);
			PushFollow(Follow._functionArgument_in_binaryFunction175);
			arg1=functionArgument(parseFileName, parsePassword);
			PopFollow();

			DebugLocation(56, 96);
			Match(input,COMMA,Follow._COMMA_in_binaryFunction178); 
			DebugLocation(56, 102);
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:56:102: ( SPACE )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, decisionCanBacktrack[4]);
				int LA4_1 = input.LA(1);

				if ((LA4_1==SPACE))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:56:102: SPACE
					{
					DebugLocation(56, 102);
					Match(input,SPACE,Follow._SPACE_in_binaryFunction180); 

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(56, 114);
			PushFollow(Follow._functionArgument_in_binaryFunction187);
			arg2=functionArgument(parseFileName, parsePassword);
			PopFollow();

			DebugLocation(56, 163);
			Match(input,CLOSEBRACKET,Follow._CLOSEBRACKET_in_binaryFunction190); 
			DebugLocation(57, 2);

					System.Func<string, string, string> function = Functions.GetBinaryFunction((func!=null?input.ToString(func.Start,func.Stop):default(string)));
					value = function(arg1, arg2);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("binaryFunction", 4);
			LeaveRule("binaryFunction", 4);
			LeaveRule_binaryFunction();
	    }
	 	DebugLocation(61, 1);
		} finally { DebugExitRule(GrammarFileName, "binaryFunction"); }
		return value;

	}
	// $ANTLR end "binaryFunction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_unaryFunction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_unaryFunction() {}
	// $ANTLR start "unaryFunction"
	// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:63:1: unaryFunction[string parseFileName, string parsePassword] returns [string value] : func= unaryFunctionName OPENBRACKET arg= functionArgument[parseFileName, parsePassword] CLOSEBRACKET ;
	[GrammarRule("unaryFunction")]
	private string unaryFunction(string parseFileName, string parsePassword)
	{
		EnterRule_unaryFunction();
		EnterRule("unaryFunction", 5);
		TraceIn("unaryFunction", 5);
	    string value = default(string);


	    ParserRuleReturnScope<IToken> func = default(ParserRuleReturnScope<IToken>);
	    string arg = default(string);

		try { DebugEnterRule(GrammarFileName, "unaryFunction");
		DebugLocation(63, 1);
		try
		{
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:64:2: (func= unaryFunctionName OPENBRACKET arg= functionArgument[parseFileName, parsePassword] CLOSEBRACKET )
			DebugEnterAlt(1);
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:64:4: func= unaryFunctionName OPENBRACKET arg= functionArgument[parseFileName, parsePassword] CLOSEBRACKET
			{
			DebugLocation(64, 9);
			PushFollow(Follow._unaryFunctionName_in_unaryFunction212);
			func=unaryFunctionName();
			PopFollow();

			DebugLocation(64, 29);
			Match(input,OPENBRACKET,Follow._OPENBRACKET_in_unaryFunction214); 
			DebugLocation(64, 45);
			PushFollow(Follow._functionArgument_in_unaryFunction220);
			arg=functionArgument(parseFileName, parsePassword);
			PopFollow();

			DebugLocation(64, 94);
			Match(input,CLOSEBRACKET,Follow._CLOSEBRACKET_in_unaryFunction223); 
			DebugLocation(65, 2);

					System.Func<string, string> function = Functions.GetUnaryFunction((func!=null?input.ToString(func.Start,func.Stop):default(string)));
					value = function(arg);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unaryFunction", 5);
			LeaveRule("unaryFunction", 5);
			LeaveRule_unaryFunction();
	    }
	 	DebugLocation(69, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryFunction"); }
		return value;

	}
	// $ANTLR end "unaryFunction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_unaryFunctionName() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_unaryFunctionName() {}
	// $ANTLR start "unaryFunctionName"
	// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:71:1: unaryFunctionName : ( 'Reverse' | 'Upper' | 'Lower' | 'Digits' | 'RemoveFileExtension' | 'FileExtension' | 'Len' );
	[GrammarRule("unaryFunctionName")]
	private ParserRuleReturnScope<IToken> unaryFunctionName()
	{
		EnterRule_unaryFunctionName();
		EnterRule("unaryFunctionName", 6);
		TraceIn("unaryFunctionName", 6);
	    ParserRuleReturnScope<IToken> retval = new ParserRuleReturnScope<IToken>();
	    retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "unaryFunctionName");
		DebugLocation(71, 8);
		try
		{
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:72:2: ( 'Reverse' | 'Upper' | 'Lower' | 'Digits' | 'RemoveFileExtension' | 'FileExtension' | 'Len' )
			DebugEnterAlt(1);
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:
			{
			DebugLocation(72, 2);
			if ((input.LA(1)>=10 && input.LA(1)<=11)||(input.LA(1)>=14 && input.LA(1)<=15)||(input.LA(1)>=17 && input.LA(1)<=18)||input.LA(1)==20)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unaryFunctionName", 6);
			LeaveRule("unaryFunctionName", 6);
			LeaveRule_unaryFunctionName();
	    }
	 	DebugLocation(78, 8);
		} finally { DebugExitRule(GrammarFileName, "unaryFunctionName"); }
		return retval;

	}
	// $ANTLR end "unaryFunctionName"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_binaryFunctionName() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_binaryFunctionName() {}
	// $ANTLR start "binaryFunctionName"
	// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:80:1: binaryFunctionName : ( 'Add' | 'Left' | 'Right' );
	[GrammarRule("binaryFunctionName")]
	private ParserRuleReturnScope<IToken> binaryFunctionName()
	{
		EnterRule_binaryFunctionName();
		EnterRule("binaryFunctionName", 7);
		TraceIn("binaryFunctionName", 7);
	    ParserRuleReturnScope<IToken> retval = new ParserRuleReturnScope<IToken>();
	    retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "binaryFunctionName");
		DebugLocation(80, 10);
		try
		{
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:81:2: ( 'Add' | 'Left' | 'Right' )
			DebugEnterAlt(1);
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:
			{
			DebugLocation(81, 2);
			if (input.LA(1)==9||input.LA(1)==13||input.LA(1)==19)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("binaryFunctionName", 7);
			LeaveRule("binaryFunctionName", 7);
			LeaveRule_binaryFunctionName();
	    }
	 	DebugLocation(83, 10);
		} finally { DebugExitRule(GrammarFileName, "binaryFunctionName"); }
		return retval;

	}
	// $ANTLR end "binaryFunctionName"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_number() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_number() {}
	// $ANTLR start "number"
	// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:85:1: number : ( DIGIT )+ ;
	[GrammarRule("number")]
	private ParserRuleReturnScope<IToken> number()
	{
		EnterRule_number();
		EnterRule("number", 8);
		TraceIn("number", 8);
	    ParserRuleReturnScope<IToken> retval = new ParserRuleReturnScope<IToken>();
	    retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "number");
		DebugLocation(85, 11);
		try
		{
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:86:2: ( ( DIGIT )+ )
			DebugEnterAlt(1);
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:86:4: ( DIGIT )+
			{
			DebugLocation(86, 4);
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:86:4: ( DIGIT )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, decisionCanBacktrack[5]);
				int LA5_1 = input.LA(1);

				if ((LA5_1==DIGIT))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:86:5: DIGIT
					{
					DebugLocation(86, 5);
					Match(input,DIGIT,Follow._DIGIT_in_number299); 

					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("number", 8);
			LeaveRule("number", 8);
			LeaveRule_number();
	    }
	 	DebugLocation(86, 11);
		} finally { DebugExitRule(GrammarFileName, "number"); }
		return retval;

	}
	// $ANTLR end "number"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_fileName() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_fileName() {}
	// $ANTLR start "fileName"
	// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:88:1: fileName : 'FileName' ;
	[GrammarRule("fileName")]
	private void fileName()
	{
		EnterRule_fileName();
		EnterRule("fileName", 9);
		TraceIn("fileName", 9);
		try { DebugEnterRule(GrammarFileName, "fileName");
		DebugLocation(88, 13);
		try
		{
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:89:2: ( 'FileName' )
			DebugEnterAlt(1);
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:89:4: 'FileName'
			{
			DebugLocation(89, 4);
			Match(input,12,Follow._12_in_fileName310); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fileName", 9);
			LeaveRule("fileName", 9);
			LeaveRule_fileName();
	    }
	 	DebugLocation(89, 13);
		} finally { DebugExitRule(GrammarFileName, "fileName"); }
		return;

	}
	// $ANTLR end "fileName"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_password() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_password() {}
	// $ANTLR start "password"
	// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:91:1: password : 'Password' ;
	[GrammarRule("password")]
	private void password()
	{
		EnterRule_password();
		EnterRule("password", 10);
		TraceIn("password", 10);
		try { DebugEnterRule(GrammarFileName, "password");
		DebugLocation(91, 13);
		try
		{
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:92:2: ( 'Password' )
			DebugEnterAlt(1);
			// D:\\Patrick\\FigLeaf\\fig-leaf\\FigLeaf.Core\\FigLeafPasswordRule.g:92:4: 'Password'
			{
			DebugLocation(92, 4);
			Match(input,16,Follow._16_in_password319); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("password", 10);
			LeaveRule("password", 10);
			LeaveRule_password();
	    }
	 	DebugLocation(92, 13);
		} finally { DebugExitRule(GrammarFileName, "password"); }
		return;

	}
	// $ANTLR end "password"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _password_in_baseArgument51 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _fileName_in_baseArgument59 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _baseArgument_in_functionArgument83 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _number_in_functionArgument96 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _function_in_functionArgument108 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _unaryFunction_in_function131 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _binaryFunction_in_function144 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _binaryFunctionName_in_binaryFunction167 = new BitSet(new ulong[]{0x0000000000000080UL});
		public static readonly BitSet _OPENBRACKET_in_binaryFunction169 = new BitSet(new ulong[]{0x00000000001FFE40UL});
		public static readonly BitSet _functionArgument_in_binaryFunction175 = new BitSet(new ulong[]{0x0000000000000020UL});
		public static readonly BitSet _COMMA_in_binaryFunction178 = new BitSet(new ulong[]{0x00000000001FFF40UL});
		public static readonly BitSet _SPACE_in_binaryFunction180 = new BitSet(new ulong[]{0x00000000001FFF40UL});
		public static readonly BitSet _functionArgument_in_binaryFunction187 = new BitSet(new ulong[]{0x0000000000000010UL});
		public static readonly BitSet _CLOSEBRACKET_in_binaryFunction190 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _unaryFunctionName_in_unaryFunction212 = new BitSet(new ulong[]{0x0000000000000080UL});
		public static readonly BitSet _OPENBRACKET_in_unaryFunction214 = new BitSet(new ulong[]{0x00000000001FFE40UL});
		public static readonly BitSet _functionArgument_in_unaryFunction220 = new BitSet(new ulong[]{0x0000000000000010UL});
		public static readonly BitSet _CLOSEBRACKET_in_unaryFunction223 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _DIGIT_in_number299 = new BitSet(new ulong[]{0x0000000000000042UL});
		public static readonly BitSet _12_in_fileName310 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _16_in_password319 = new BitSet(new ulong[]{0x0000000000000002UL});
	}
	#endregion Follow sets
}

} // namespace  FigLeaf.Core.PasswordRules 
